*ddc.txt*	Dark deno powered completion framework for neovim/Vim8

Version: 0.4
Author: Shougo <Shougo.Matsu at gmail.com>
License: MIT license

CONTENTS						*ddc-contents*

Introduction		|ddc-introduction|
Install			|ddc-install|
Interface		|ddc-interface|
  Options		  |ddc-options|
  Key mappings		  |ddc-key-mappings|
  Functions		  |ddc-functions|
  Custom Functions	  |ddc-custom-functions|
Examples		|ddc-examples|
Sources			|ddc-sources|
  Source option	          |ddc-source-options|
  Source params	          |ddc-source-params|
Filters			|ddc-filters|
  Filter options	  |ddc-filter-options|
  Filter params		  |ddc-filter-params|
Create source		|ddc-create-source|
  Source attributes	  |ddc-source-attributes|
  Candidate attributes    |ddc-candidate-attributes|
Create filter		|ddc-create-filter|
  filter attributes	  |ddc-filter-attributes|
FAQ			|ddc-faq|
Compatibility		|ddc-compatibility|


==============================================================================
INTRODUCTION						*ddc-introduction*

*ddc* is the abbreviation of "dark deno powered completion".  It provides an
asynchronous keyword completion system in the current buffer.


==============================================================================
INSTALL							*ddc-install*

Note: Ddc.vim requires Neovim (0.5.0+) or Vim8.2.0662+ (latest is
recommended).

Please install both Deno and "denops.vim".

https://deno.land/
https://github.com/vim-denops/denops.vim

Note: Ddc.vim does not include any sources and filters.
You must install them you want manually.
You can search ddc.vim plugins(sources and filters) from
https://github.com/topics/ddc-vim.


==============================================================================
INTERFACE						*ddc-interface*

------------------------------------------------------------------------------
OPTIONS	 						*ddc-options*

Options can be toggled through the use of |ddc#custom#patch_global()|.

For example:
>
    " Set a single option
    call ddc#custom#patch_global('completionMode', 'manual')

    " Pass a dictionary to set multiple options
    call ddc#custom#patch_global({
    \ 'keywordPattern': '[a-zA-Z_]\w*',
    \ 'smartCase': v:true,
    \ })

    call ddc#custom#patch_filetype(['c', 'cpp'], 'sources', ['around'])
<

The set of available options follows.

					*ddc-option-autoCompleteEvents*
autoCompleteEvents
		The auto completion fired events.  It must be list of
		|autocmd-events| string.

		Default value: ["InsertEnter", "TextChangedI", "TextChangedP"]

						*ddc-option-completionMode*
completionMode
		The completion mode. It must be following string.

		"popupmenu": Use |ins-completion-menu|.
		"inline": Use virtual text by |nvim_buf_set_extmark()|.  It is
			neovim only.
		"manual": You can display popupmenu manually by
			|ddc#complete()|.

		Default value: "popupmenu"

						*ddc-option-filterOptions*
filterOptions
		It is a dictionary that maps filter names to its options.
		See also |ddc-filter-options|.
		Default value: {}
>
		" e.g.
		call ddc#custom#patch_global('filterOptions', {
		    \ 'matcher_head': {},
		    \ })
<
						*ddc-option-filterParams*
filterParams
		It is a dictionary that maps filter names to its parameters.
		Default value: {}
>
		" e.g.
		call ddc#custom#patch_global('filterParams', {
		    \ 'matcher_head': {},
		    \ })
<
					*ddc-option-keywordPattern*
keywordPattern
		It defines the keyword pattern for completion.
		Note: It is JavaScript regexp.
		Note: "\k" is converted to 'iskeyword' pattern.

		Default value: '\k*'

							*ddc-option-sources*
sources
		It is a list of registered source names.  You have to select
		one or more sources to use completion.
		Candidates from sources with smaller indexes will have smaller
		indexes.

		Default value: []
>
		" e.g.
		call ddc#custom#patch_global('sources', ['around'])
<
						*ddc-option-sourceOptions*
sourceOptions
		It is a dictionary that maps source names to its options.  The
		options with the name "_" is used as the options for all
		sources.
		See also |ddc-source-options|.
		Default value: {}
>
		" e.g.
		call ddc#custom#patch_global('sourceOptions', {
		    \ '_': {'matchers': ['matcher_head']},
		    \ 'around': {'mark': 'A'},
		    \ })
<
						*ddc-option-sourceParams*
sourceParams
		It is a dictionary that maps source names to its parameters.
		See also |ddc-source-params|.
		Default value: {}
>
		" e.g.
		call ddc#custom#patch_global('sourceParams', {
		    \ 'around': {'max': 8},
		    \ })
<
				*ddc-option-specialBufferCompletionFiletypes*
specialBufferCompletionFiletypes
		If 'buftype' is not "", ddc auto completion is disabled
		automatically except the filetype list.

		Default value: []

------------------------------------------------------------------------------
FUNCTIONS 						*ddc-functions*

							*ddc#disable()*
ddc#disable()
		Disable ddc.vim auto completion.
		It should be used when ddc.vim is broken.
		Note: It changes the global state.

							*ddc#enable()*
ddc#enable()
		Enable ddc.vim auto completion.
		Note: It changes the global state.

						*ddc#refresh_candidates()*
ddc#refresh_candidates()
		It calls the auto completion of ddc to refresh current
		candidates.

						*ddc#register_filter()*
ddc#register_filter({dict})
		Register filter.
		The {dict} must have following keys.

		name: The filter name
		path: The filter path

						*ddc#register_source()*
ddc#register_source({dict})
		Register source.
		The {dict} must have following keys.

		name: The source name
		path: The source path


CUSTOM FUNCTIONS 					*ddc-custom-functions*

						*ddc#custom#patch_global()*
ddc#custom#patch_global({option-name}, {value})
ddc#custom#patch_global({dict})
		Set {option-name} option to {value}.
		If {dict} is available, the key is {option-name} and the value
		is {value}. See |ddc-options| for available {option-name}.

						*ddc#custom#patch_filetype()*
ddc#custom#patch_filetype({filetype}, {option-name}, {value})
ddc#custom#patch_filetype({filetype}, {dict})
		Set options used for filetypes. {filetype} accepts a string or
		a list of strings. Options are {dict} or {'{option-name}':
		{value}}.

						*ddc#custom#patch_buffer()*
ddc#custom#patch_buffer({option-name}, {value})
ddc#custom#patch_buffer({dict})
		Set local options on current buffer.  The arguments are the
		same as for |ddc#custom#patch_global()|.

------------------------------------------------------------------------------
KEY MAPPINGS 						*ddc-key-mappings*

							*ddc#can_complete()*
ddc#can_complete()
		Return |v:true| if current word completion is available.

							*ddc#complete()*
ddc#complete()
		Open current completion popup menu.
		Note: It must be in |:map-<expr>|.

						*ddc#complete_common_string()*
ddc#complete_common_string()
		Complete common string in candidates.
		This can be useful when candidates have a long common prefix.
		Note: It must be in |:map-<expr>|.

						*ddc#insert_candidate()*
ddc#insert_candidate({index})
		Insert the candidate at index {index}. Indices start at 0.
		Note: It must be in |:map-<expr>|.

					    	*ddc#manual_complete()*
ddc#manual_complete([{sources}])
		Manual trigger ddc completion.
		You can provide a list of {sources}: It can be the name of a
		source or a list of sources name.
		Note: It must be in |:map-<expr>|.

==============================================================================
EXAMPLES						*ddc-examples*
>
	" Customize global settings

	" Use around source.
	" https://github.com/Shougo/ddc-around
	call ddc#custom#patch_global('sources', ['around'])

	" Use matcher_head and sorter_rank.
	" https://github.com/Shougo/ddc-matcher_head
	" https://github.com/Shougo/ddc-sorter_rank
	call ddc#custom#patch_global('sourceOptions', {
	      \ '_': {
	      \   'matchers': ['matcher_head'],
	      \   'sorters': ['sorter_rank']},
	      \ })

	" Change source options
	call ddc#custom#patch_global('sourceOptions', {
	      \ 'around': {'mark': 'A'},
	      \ })
	call ddc#custom#patch_global('sourceParams', {
	      \ 'around': {'maxSize': 500},
	      \ })

	" Customize settings on a filetype
	call ddc#custom#patch_filetype(
	    \ ['c', 'cpp'], 'sources', ['around', 'clangd']
	    \ )
	call ddc#custom#patch_filetype(['c', 'cpp'], 'sourceOptions', {
	    \ 'clangd': {'mark': 'C'},
	    \ })
	call ddc#custom#patch_filetype('markdown', 'sourceParams', {
	    \ 'around': {'maxSize': 100},
	    \ })

	" Mappings

	" <TAB>: completion.
	inoremap <silent><expr> <TAB>
	\ pumvisible() ? "\<C-n>" :
	\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
	\ "\<TAB>" : ddc#manual_complete()

	" <S-TAB>: completion back.
	inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

	" Use ddc.
	call ddc#enable()
<

==============================================================================
SOURCES							*ddc-sources*

Note: The sources are not bundled in ddc.vim.  You need to install them
to use ddc.vim.  Please search them by https://github.com/topics/ddc-source

Note: The default sources are empty.  You need to
configure them to use ddc.

The sources must be registered by |ddc#register_source()| or put under
"denops/ddc-sources/*.ts".

------------------------------------------------------------------------------
SOURCE OPTIONS						*ddc-source-options*

Note: The sources cannot set default options for source.  If the source need
to specify the recommended configuration, you should write it in the
documentation instead.

				    		*ddc-source-option-converters*
converters		([String])
		It is a list of registered filter names that used with this
		source.  Candidates will be processed in the order you specify
		here.

		Default: []

				*ddc-source-option-forceCompletionPattern*
forceCompletionPattern	(String)
		If it matches the input, ddc ignores
		|ddc-source-option-minAutoCompleteLength|.
		Note: It is JavaScript regexp.

		Default value: ''

				    	*ddc-source-option-ignoreCase*
ignoreCase	(Boolean)
		If it is True, ddc ignores case.

		Default: v:false

				    	*ddc-source-option-isVolatile*
isVolatile	(Boolean)
		If it is True, ddc refresh candidates always.

		Default: v:false

				    	    	*ddc-source-option-mark*
mark		(String)
		A text icon indicating the source displayed with the
		candidate.
		Note: If the source set candidate menu, the source must set
		it.  If the attribute is empty string, the candidate menu will
		be disabled.

		Default: ""

				    *ddc-source-option-maxAutoCompleteLength*
maxAutoCompleteLength	(Integer)
		Ignored length of keyword for auto completion.
		It is useful to edit BASE64 files.

		Default: 80

				    	*ddc-source-option-maxCandidates*
maxCandidates	(Integer)
		If there are more candidates than this value, ddc will ignore
		the filtering.

		Default: 500

					*ddc-source-attribute-matcherKey*
matcherKey	(String)			(Optional)
		Matcher compare key instead of "word".
		If it is empty string, the feature is disabled.

		Default: ""

				    		*ddc-source-option-matchers*
matchers	([String])
		It is a list of registered filter names that used with this
		source.  Candidates will be processed in the order you specify
		here.

		Default: []

				    *ddc-source-option-minAutoCompleteLength*
minAutoCompleteLength	(Integer)
		Length of keyword required for auto completion.

		Default: 2

				    		*ddc-source-option-sorters*
sorters		([String])
		It is a list of registered filter names that used with this
		source.  Candidates will be processed in the order you specify
		here.

		Default: []

------------------------------------------------------------------------------
SOURCE PARAMS					*ddc-source-params*

These are the parameters that each source can have.  You can select the
behavior and tune the performance.

Please read the source documentation.


==============================================================================
FILTERS							*ddc-filters*

Once candidates have been supplied by one or more sources, they are passed
through the filters, which are matchers, converters or sorters. Sources can
have specific filters.

Note: The filters are not bundled in ddc.vim.  You need to install them
to use ddc.vim.  Please search them by https://github.com/topics/ddc-filter

Note: The default matchers/sorters/converters are empty.  You need to
configure them to use ddc.

The filters must be registered by |ddc#register_filter()| or put under
"denops/ddc-filters/*.ts".

------------------------------------------------------------------------------
FILTER OPTIONS						*ddc-filter-options*

Undefined now

------------------------------------------------------------------------------
FILTER PARAMS						*ddc-filter-params*

These are the parameters that each filter can have.  You can select the
behavior and tune the performance.

Please read the filter documentation.


==============================================================================
CREATE SOURCE						*ddc-create-source*

To create source, you should read other sources implementation.

The files must be registered by |ddc#register_source()|.
Source class must extend the Base class.

Note: The sources must be written in Typescript language.

Note: If you call Vim functions in your source, it is not asynchronous.


------------------------------------------------------------------------------
SOURCE ATTRIBUTES				*ddc-source-attributes*

					*ddc-source-attribute-events*
events		(string[])			(Optional)
		List of events for which |ddc-source-attribute-onEvent|
		should get called.

		Default: []

					*ddc-source-attribute-isBytePos*
isBytePos	(boolean)			(Optional)
		If |ddc-source-attribute-getCompletePosition| returns byte
		position, it must be true.
		It is useful to use Vim script function.

		Default: false

				*ddc-source-attribute-gatherCandidates*
gatherCandidates
		(function)			(Required)
		It is called to gather candidates.

				*ddc-source-attribute-getCompletePosition*
getCompletePosition
		(function)			(Optional)
		It is called to get the position of the current completion.

				*ddc-source-attribute-onEvent*
onEvent
		(function)			(Required)
		Called for the autocommands.
		It is useful to make cache.

				*ddc-source-attribute-onInit*
onInit
		(function)			(Optional)
		Called to initialize source.

				*ddc-source-attribute-params*
params
		(function)			(Optional)
		Called to get source params.


------------------------------------------------------------------------------
CANDIDATE ATTRIBUTES				*ddc-candidate-attributes*

					*ddc-candidate-attribute-name*
word		(String)			(Required)
		The completion word of a candidate. It is used for matching
		inputs.

					*ddc-candidate-attribute-abbr*
abbr		(String)			(Optional)
		The abbreviation of a candidate. It is displayed in popup
		window.

					*ddc-candidate-attribute-kind*
kind		(String)			(Optional)
		The kind of a candidate. It is displayed in popup window.

					*ddc-candidate-attribute-menu*
menu		(String)			(Optional)
		The menu information of a candidate. It is displayed in popup
		window.

					*ddc-candidate-attribute-info*
info		(String)			(Optional)
		The preview information of a candidate. If 'completeopt'
		contains "preview", it will be displayed in |preview-window|.

					*ddc-candidate-attribute-dup*
dup		(Integer)			(Optional)
		If it is non zero, the item will be displayed in the popup
		menu when an item with the same word is already present.


==============================================================================
CREATE FILTER						*ddc-create-filter*

To create filter, you should read other filters implementation.

The files must be registered by |ddc#register_filter()|.
Filter class must extend the Base class.

Note: The filters must be written in Typescript language.

Note: If you call Vim functions in your source, it is not asynchronous.


------------------------------------------------------------------------------
FILTER ATTRIBUTES				*ddc-filter-attributes*

					*ddc-filter-attribute-events*
events		(string[])			(Optional)
		List of events for which |ddc-filter-attribute-onEvent|
		should get called.

		Default: []

				*ddc-filter-attribute-filter*
filter
		(function)			(Required)
		It is called to filter candidates.

				*ddc-filter-attribute-onEvent*
onEvent
		(function)			(Required)
		Called for the autocommands.
		It is useful to make cache.

				*ddc-filter-attribute-onInit*
onInit
		(function)			(Optional)
		Called to initialize filter.

				*ddc-filter-attribute-params*
params
		(function)			(Optional)
		Called to get filter params.


==============================================================================
FREQUENTLY ASKED QUESTIONS (FAQ)			*ddc-faq*

Q: How to donate money to you?

A: I have started github sponsorship to spend more time for Vim/neovim
plugins.  You can donate money to help me!

   https://github.com/sponsors/Shougo


Q: Why does ddc.vim not include any sources/matchers/sorters/converters?

A: Because I cannot determine the best default
sources/matchers/sorters/converters.
Users use different environments/policy, etc...
So ddc.vim should not define the defaults.
You must define your defaults by configuration.
ddc.vim does not conflict with your defaults.


Q: Why do sources have no default options?

A: Because users can customize sources perfectly.  If a source has the
default, users have to check them.  It increases configuration cost.
The config should work as users config.


Q: I want to use inline suggestiong like fish shell.

A: >
	inoremap <expr><C-t>       ddc#insert_candidate(0)
	call ddc#custom#patch_global('completionMode', 'inline')


Q: The Linked/chained completion exists like vim-mucomplete?

A: It is not implemented, but you can emulate the behavior by
   |ddc#manual_complete()| like this. >

	let g:chains = ['around', 'zsh', 'deoppet']
	function! MyChainCompletion() abort
	  let head = g:chains[0]
	  let g:chains = g:chains[1:] + [head]
	  return ddc#manual_complete([head])
	endfunction
	inoremap <silent><expr> <C-t>  MyChainCompletion()


Q: I want to silence the |ins-completion-menu| messages in the command line
such as "-- XXX completion (YYY)", "match 1 of 2", "The only match", "Pattern
not found", "Back at original", etc.

A: You can disable the messages through the 'shortmess' option. >

	set shortmess+=c


Q: I want to use the auto select feature.

A: You can use it by the 'completeopt' option. >

	set completeopt+=noinsert


Q: How do I select one of the responses from the pop up?

A: Please press <C-y> on the candidate.


Q: I want to close the preview window after completion is done.

A: >
	autocmd CompleteDone * silent! pclose!
<
Or
>
	autocmd InsertLeave * silent! pclose!
<
   Note: It conflicts with delimitMate.
   https://github.com/Shougo/deoplete.nvim/issues/234


Q: I want to disable the preview window feature.

A: >
	set completeopt-=preview


Q: I want to look selected function's arguments. But I don't like preview
window feature.

A: You can do it by echodoc plugin.
   http://github.com/Shougo/echodoc.vim


Q: I want to use floating preview window feature.

A: Please install float-preview.nvim plugin.
   https://github.com/ncm2/float-preview.nvim


==============================================================================
COMPATIBILITY						*ddc-compatibility*

2021.08.28
* "denops/ddc-sources/*.ts" or "denops/ddc-filters/*.ts" files are autoloaded.

2021.08.27
* Remove deprecated prototypes

2021.08.20
* Sources and Filters functions arguments are changed

2021.08.15
* Use 'iskeyword' for |ddc-option-keywordPattern|.

2021.08.14
* Don't complete when backspace, because of completion flicker.

2021.08.13
* Disable special buffers completion except
  ddc-option-specialBufferCompletionFiletypes.

2021.08.09
* Rename ddc#auto_complete() to ddc#refresh_candidates()

2021.08.02
* Change gatherCandidates() arguments in sources
* Change filter() arguments in filters

2021.08.01
* Split "around" source
* Split "matcher_head" filter
* Split "sorter_rank" filter

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
