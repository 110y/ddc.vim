*ddc.txt*	Dark deno powered completion framework for neovim/Vim8

Version: 0.2
Author: Shougo <Shougo.Matsu at gmail.com>
License: MIT license

CONTENTS						*ddc-contents*

Introduction		|ddc-introduction|
Install			|ddc-install|
Interface		|ddc-interface|
  Options		  |ddc-options|
  Key mappings		  |ddc-key-mappings|
  Functions		  |ddc-functions|
  Custom Functions	  |ddc-custom-functions|
Examples		|ddc-examples|
Sources			|ddc-sources|
  Source option	         |ddc-source-options|
  Source params	         |ddc-source-params|
Filters			|ddc-filters|
  Filter options          |ddc-filter-options|
  Filter params	   |ddc-filter-params|
Create source		|ddc-create-source|
  Source attributes       |ddc-source-attributes|
  Candidate attributes    |ddc-candidate-attributes|
Create filter		|ddc-create-filter|
  filter attributes       |ddc-filter-attributes|
FAQ			|ddc-faq|
Compatibility		|ddc-compatibility|


==============================================================================
INTRODUCTION						*ddc-introduction*

*ddc* is the abbreviation of "dark deno powered completion".  It provides an
asynchronous keyword completion system in the current buffer.


==============================================================================
INSTALL							*ddc-install*

Note: ddc requires Neovim (0.5.0+) or Vim8.2+ (latest is recommended).

Please install both Deno and "denops.vim".

https://deno.land/
https://github.com/vim-denops/denops.vim


==============================================================================
INTERFACE						*ddc-interface*

------------------------------------------------------------------------------
OPTIONS	 						*ddc-options*

Options can be toggled through the use of |ddc#custom#patch_global()|.

For example:
>
    " Set a single option
    call ddc#custom#patch_global('autoCompleteDelay', 200)

    " Pass a dictionary to set multiple options
    call ddc#custom#patch_global({
    \ 'autoCompleteDelay': 200,
    \ 'smartCase': v:true,
    \ })

    call ddc#custom#patch_filetype(['c', 'cpp'], 'sources', ['around'])
<

The set of available options follows.

					*ddc-options-sources*
sources
		It is a list of registered source names.  You have to select
		one or more sources to use completion.
		Candidates from sources with smaller indexes will have smaller
		indexes.

		Default value: []
>
		" e.g.
		call ddc#custom#patch_global('sources', ['around'])
<
					*ddc-options-sourceOptions*
sourceOptions
		It is a dictionary that maps source names to its options.  The
		options with the name "_" is used as the options for all
		sources.
		See also |ddc-source-options|.
		Default value: {}
>
		" e.g.
		call ddc#custom#patch_global('sourceOptions', {
		    \ '_': {'matchers': ['matcher_head']},
		    \ 'around': {'mark': 'A'},
		    \ })
<
					*ddc-options-sourceParams*
sourceParams
		It is a dictionary that maps source names to its parameters.
		See also |ddc-source-params|.
		Default value: {}
>
		" e.g.
		call ddc#custom#patch_global('sourceParams', {
		    \ 'around': {'max': 8},
		    \ })
<
					*ddc-options-sourceParams*
filterOptions
		It is a dictionary that maps filter names to its options.
		See also |ddc-filter-options|.
		Default value: {}
>
		" e.g.
		call ddc#custom#patch_global('filterOptions', {
		    \ 'matcher_head': {},
		    \ })
<
					*ddc-options-sourceParams*
filterParams
		It is a dictionary that maps filter names to its parameters.
		See also |ddc-filter-params|.
		Default value: {}
>
		" e.g.
		call ddc#custom#patch_global('filterParams', {
		    \ 'matcher_head': {},
		    \ })

------------------------------------------------------------------------------
FUNCTIONS 						*ddc-functions*

							*ddc#disable()*
ddc#disable()
		Disable ddc auto completion.
		It should be used when ddc is broken.
		Note: It changes the global state.

							*ddc#enable()*
ddc#enable()
		Enable ddc auto completion.
		Note: It changes the global state.

							*ddc#register_filter()*
ddc#register_filter({dict})
		Register filter.
		The {dict} must have following keys.

		name: The filter name
		path: The filter path

							*ddc#register_source()*
ddc#register_source({dict})
		Register source.
		The {dict} must have following keys.

		name: The source name
		path: The source path


CUSTOM FUNCTIONS 					*ddc-custom-functions*

						*ddc#custom#patch_global()*
ddc#custom#patch_global({option-name}, {value})
ddc#custom#patch_global({dict})
		Set {option-name} option to {value}.
		If {dict} is available, the key is {option-name} and the value
		is {value}. See |ddc-options| for available {option-name}.

						*ddc#custom#patch_filetype()*
ddc#custom#patch_filetype({filetype}, {option-name}, {value})
ddc#custom#patch_filetype({filetype}, {dict})
		Set options used for filetypes. {filetype} accepts a string or
		a list of strings. Options are {dict} or {'{option-name}':
		{value}}.

						*ddc#custom#patch_buffer()*
ddc#custom#patch_buffer({option-name}, {value})
ddc#custom#patch_buffer({dict})
		Set local options on current buffer.  The arguments are the
		same as for |ddc#custom#patch_global|.

------------------------------------------------------------------------------
KEY MAPPINGS 						*ddc-key-mappings*

==============================================================================
EXAMPLES						*ddc-examples*
>
	" Customize global settings
	" Use around source.
	call ddc#custom#patch_global('sources', ['around'])
	" Enable default matcher.
	call ddc#custom#patch_global('sourceOptions', {
	      \ '_': {'matchers': ['matcher_head']},
	      \ }
	" Change source options
	call ddc#custom#patch_global('sourceOptions', {
	      \ 'around': {'matchers': ['matcher_head'], 'mark': 'A'},
	      \ })
	call ddc#custom#patch_global('sourceParams', {
	      \ 'around': {'maxSize': 500},
	      \ })
	
	" Customize settings on a filetype
	call ddc#custom#patch_filetype(
	    \ ['c', 'cpp'], 'sources', ['around', 'clangd']
	    \ )
	call ddc#custom#patch_filetype(['c', 'cpp'], 'sourceOptions', {
	    \ 'clangd': {'mark': 'C'},
	    \ })
	call ddc#custom#patch_filetype('markdown', 'sourceParams', {
	    \ 'around': {'maxSize': 100},
	    \ })
	
	call ddc#enable()
<

==============================================================================
SOURCES							*ddc-sources*

around							*ddc-source-around*
		This source collects candidates around the cursor, namely
		inside current buffer.

------------------------------------------------------------------------------
SOURCE OPTIONS						*ddc-source-options*

				    	    	*ddc-source-option-mark*
mark		(String)
		A text icon indicating the source displayed with the
		candidate.
		Note: If the source set candidate menu, the source must set
		it.  If the attribute is empty string, the candidate menu will
		be disabled.

		Default: ""

				    	*ddc-source-option-maxCandidates*
maxCandidates	(Integer)
		If there are more candidates than this value, ddc will ignore
		the filtering.

		Default: 500

				    		*ddc-source-option-matchers*
matchers	([string])
		It is a list of registered filter names that used with this
		source.  Candidates will be processed in the order you specify
		here.

		Default: []

				    		*ddc-source-option-sorters*
sorters		([string])
		It is a list of registered filter names that used with this
		source.  Candidates will be processed in the order you specify
		here.

		Default: []

				    		*ddc-source-option-converters*
converters		([string])
		It is a list of registered filter names that used with this
		source.  Candidates will be processed in the order you specify
		here.

		Default: []

------------------------------------------------------------------------------
SOURCE PARAMS					*ddc-source-params*

These are the parameters that each source can have.  You can select the
behavior and tune the performance.


==============================================================================
FILTERS							*ddc-filters*

Once candidates have been supplied by one or more sources, they are passed
through the filters, which are matchers, converters or sorters. Sources can
have specific filters.

Note: The default matchers/sorters/converters are empty.  You need to
configure them to use ddc.

				    	    	*ddc-filter-matcher_head*
matcher_head	Head matching matcher.

==============================================================================
CREATE SOURCE						*ddc-create-source*

To create source, you should read other sources implementation.

The files must be registerd by |ddc#register_source()|.
Source class must extend the Base class.

Note: The sources must be written in Typescript language.

Note: If you call Vim functions in your source, it is not asynchronous.


------------------------------------------------------------------------------
SOURCE ATTRIBUTES					*ddc-source-attributes*

------------------------------------------------------------------------------
CANDIDATE ATTRIBUTES				*ddc-candidate-attributes*

==============================================================================
CREATE FILTER						*ddc-create-filter*

To create filter, you should read other filters implementation.

The files must be registerd by |ddc#register_filter()|.
Filter class must extend the Base class.

Note: The filters must be written in Typescript language.

Note: If you call Vim functions in your source, it is not asynchronous.


------------------------------------------------------------------------------
FILTER ATTRIBUTES					*ddc-filter-attributes*


==============================================================================
FREQUENTLY ASKED QUESTIONS (FAQ)			*ddc-faq*

Q: How to donate money to you?

A: I have started github sponsorship to spend more time for Vim/neovim
plugins.  You can donate money to help me!

https://github.com/sponsors/Shougo


Q: Why does ddc.vim not include any sources/matchers/sorters/converters?

A: Because I cannot determine the best default
sources/matchers/sorters/converters.
Users use different environments/policy, etc...
So ddc.vim should not define the defaults.
You must define your defaults by configuration.
ddc.vim does not conflict with your defaults.


Q: Why do sources have no default options?

A: Because users can customize sources perfectly.  If a source has the
default, users have to check them.  It increases configuration cost.
The config should work as users config.


==============================================================================
COMPATIBILITY						*ddc-compatibility*


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
